// gameManager.js
const prompts = require('./prompts');
const { createSession, getSession, sessions } = require('./sessionStore');
const { shuffle } = require('./utils');
const { Markup } = require('telegraf');

async function startGame(ctx, bot) {
  const chatId = ctx.chat.id;
  createSession(chatId);
  const session = getSession(chatId);

  session.phase = 'joining';
  await ctx.reply(
    `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É. –ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤...`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  );
}

async function handleJoin(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  const session = getSession(chatId);
  if (!session || session.phase !== 'joining') return;

  if (session.players.some(p => p.id === userId)) {
    return ctx.answerCbQuery('–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!');
  }
  session.players.push({ id: userId, name: ctx.from.first_name });
  await ctx.answerCbQuery('–î–æ–±–∞–≤–∏–ª —Ç–µ–±—è!');
  await ctx.reply(`${ctx.from.first_name} –≤—Å—Ç—É–ø–∏–ª(–∞) –≤ –∏–≥—Ä—É!`);
}

async function beginGame(ctx, bot) {
  const chatId = ctx.chat.id;
  const session = getSession(chatId);
  if (!session || session.phase !== 'joining') return;
  if (session.players.length < 3) {
    return ctx.answerCbQuery('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞!');
  }

  session.phase = 'answering';
  session.prompt = prompts[Math.floor(Math.random() * prompts.length)];
  session.answers = [];
  session.votes = {};
  session.scores = {};

  await bot.telegram.sendMessage(chatId, 'üìù –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞–Ω–∏–µ –≤ –õ–° –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º...');
  for (const p of session.players) {
    try {
      await bot.telegram.sendMessage(
        p.id,
        `üìù –¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n${session.prompt}\n\n–£ —Ç–µ–±—è 60 —Å–µ–∫—É–Ω–¥.`
      );
    } catch {
      await bot.telegram.sendMessage(chatId, `‚ùå –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å ${p.name} –≤ –õ–°.`);
    }
  }

  // —á–µ—Ä–µ–∑ 60—Å –ø—É–±–ª–∏–∫—É–µ–º –æ—Ç–≤–µ—Ç—ã
  setTimeout(() => publishAnswers(chatId, bot), 60000);
}

async function handleAnswer(ctx) {
  // –∏—â–µ–º —Å–µ—Å—Å–∏—é, –≥–¥–µ —Å–µ–π—á–∞—Å —Ñ–∞–∑–∞ 'answering' –∏ —Ç—ã –≤ players
  const session = Object.values(sessions).find(
    s => s.phase === 'answering' && s.players.some(p => p.id === ctx.from.id)
  );
  if (!session) return;

  if (session.answers.some(a => a.id === ctx.from.id)) {
    return ctx.reply('–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç!');
  }
  session.answers.push({ id: ctx.from.id, text: ctx.message.text });
  await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!');
}

async function publishAnswers(chatId, bot) {
  const session = getSession(chatId);
  session.phase = 'voting';
  session.answers = shuffle(session.answers);

  let text = 'üó≥ –ì–æ–ª–æ—Å—É–µ–º –∑–∞ —Å–∞–º—ã–π –∫—Ä–∏–Ω–∂–æ–≤—ã–π –æ—Ç–≤–µ—Ç:\n';
  session.answers.forEach((a, i) => (text += `${i + 1}. ${a.text}\n`));

  const buttons = session.answers.map((_, i) => [Markup.button.callback(`${i+1}`, `vote_${i}`)]);
  await bot.telegram.sendMessage(chatId, text, Markup.inlineKeyboard(buttons));

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª
  setTimeout(() => {
    if (session.phase === 'voting') countVotes(chatId, bot);
  }, 30000);
}

async function handleVote(ctx) {
  const chatId = ctx.chat.id;
  const session = getSession(chatId);
  if (!session || session.phase !== 'voting') return;

  const idx = Number(ctx.match[1]);
  const voted = session.answers[idx];
  if (!voted || voted.id === ctx.from.id) {
    return ctx.answerCbQuery('–ù–µ–ª—å–∑—è –∑–∞ —Å–µ–±—è –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ!');
  }
  if (session.votes[ctx.from.id]) {
    return ctx.answerCbQuery('–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª!');
  }

  session.votes[ctx.from.id] = voted.id;
  await ctx.answerCbQuery('–ì–æ–ª–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω! ‚úÖ');

  // –µ—Å–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤—Å–µ ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Å—á–µ—Ç
  if (Object.keys(session.votes).length === session.players.length) {
    countVotes(chatId, bot);
  }
}

function countVotes(chatId, bot) {
  const session = getSession(chatId);
  session.phase = 'finished';

  // —Å—á–∏—Ç–∞–µ–º
  Object.values(session.votes).forEach(id => {
    session.scores[id] = (session.scores[id] || 0) + 1;
  });

  // –∏—â–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  const [winnerId] = Object.entries(session.scores).reduce(
    (best, [id, sc]) => (sc > best[1] ? [id, sc] : best),
    [null, -1]
  );

  const winner = session.players.find(p => p.id == winnerId);
  bot.telegram.sendMessage(chatId, `üëë –ö—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª—å: ${winner.name}!`);
}

module.exports = { startGame, handleJoin, beginGame, handleAnswer, handleVote };
