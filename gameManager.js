const prompts = require('./prompts')
const store = require('./sessionStore')
const { shuffle } = require('./utils')
const { Markup } = require('telegraf')

// –ó–∞–ø—É—Å–∫ —Ñ–∞–∑—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
async function startGame(ctx) {
  const chatId = ctx.chat.id
  store.createSession(chatId)
  const session = store.getSession(chatId)
  session.players = []
  session.phase = 'joining'
  session.roundNumber = 0
  session.prompt = null
  session.answers = []
  session.votes = {}
  session.scores = {}

  const msg = await ctx.reply(
    `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É. –ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤...`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  )
  session.joinMessage = { chatId, messageId: msg.message_id }
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
async function handleJoin(ctx) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return
  const userId = ctx.from.id
  if (session.players.some(p => p.id === userId)) {
    return ctx.answerCbQuery('–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')
  }
  session.players.push({ id: userId, name: ctx.from.first_name })
  await ctx.answerCbQuery('–¢—ã –≤ –∏–≥—Ä–µ!')
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–∞–º–∏
  const playersList = session.players.map((p, i) => `${i + 1}. ${p.name}`).join('\n')
  const text = `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ (—Ä–∞—É–Ω–¥ ${session.roundNumber + 1}/3)\n–ò–≥—Ä–æ–∫–∏:\n${playersList}`
  await ctx.telegram.editMessageText(
    session.joinMessage.chatId,
    session.joinMessage.messageId,
    null,
    text,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  )
}

// –ù–∞—á–∞–ª–æ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã
async function beginRound(chatId, bot) {
  const session = store.getSession(chatId)
  session.phase = 'answering'
  session.roundNumber++
  session.prompt = prompts[Math.floor(Math.random() * prompts.length)]
  session.answers = []
  session.votes = {}

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (join –∏–ª–∏ task)
  if (session.currentMessage) {
    await bot.telegram.deleteMessage(session.currentMessage.chatId, session.currentMessage.messageId).catch(() => {})
  }

  // –°–æ–æ–±—â–∞–µ–º –≤ —á–∞—Ç –æ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞
  const roundMsg = await bot.telegram.sendMessage(
    chatId,
    `üìù –†–∞—É–Ω–¥ ${session.roundNumber}/3: –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤ –õ–° –∏–≥—Ä–æ–∫–∞–º.`
  )
  session.currentMessage = { chatId, messageId: roundMsg.message_id }

  // –†–∞–∑–æ—Å–ª–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  for (const p of session.players) {
    try {
      await bot.telegram.sendMessage(
        p.id,
        `üìù –†–∞—É–Ω–¥ ${session.roundNumber}/3 ‚Äî —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ:\n${session.prompt}\n60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç.`
      )
    } catch {
      await bot.telegram.sendMessage(chatId, `‚ùå –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å ${p.name}`)
    }
  }

  setTimeout(() => publishAnswers(chatId, bot), 60000)
}

// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ —á–∞—Ç–∞
async function beginGame(ctx, bot) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return
  if (session.players.length < 3) {
    return ctx.answerCbQuery('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞!')
  }
  // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ join
  await ctx.telegram.deleteMessage(session.joinMessage.chatId, session.joinMessage.messageId)
  await ctx.answerCbQuery('–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç!')
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
  await beginRound(chatId, bot)
}

// –°–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
async function handleAnswer(ctx) {
  const session = Object.values(store.sessions).find(
    s => s.phase === 'answering' && s.players.some(p => p.id === ctx.from.id)
  )
  if (!session) return
  if (session.answers.some(a => a.id === ctx.from.id)) {
    return ctx.reply('–¢—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª!')
  }
  session.answers.push({ id: ctx.from.id, text: ctx.message.text })
  await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async function publishAnswers(chatId, bot) {
  const session = store.getSession(chatId)
  session.phase = 'voting'
  session.answers = shuffle(session.answers)
  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏
  await bot.telegram.deleteMessage(session.currentMessage.chatId, session.currentMessage.messageId).catch(() => {})
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  let text = `üó≥ –†–∞—É–Ω–¥ ${session.roundNumber}/3 ‚Äî –≥–æ–ª–æ—Å—É–µ–º:\n${session.prompt}`
  session.answers.forEach((a,i) => text += `\n${i+1}. ${a.text}`)
  const buttons = session.answers.map((_,i)=>[Markup.button.callback(`${i+1}`,`vote_${i}`)])
  const voteMsg = await bot.telegram.sendMessage(chatId, text, Markup.inlineKeyboard(buttons))
  session.currentMessage = { chatId, messageId: voteMsg.message_id }

  setTimeout(() => {
    if (session.phase==='voting') {
      bot.telegram.deleteMessage(session.currentMessage.chatId, session.currentMessage.messageId).catch(()=>{})
      countVotes(chatId, bot.telegram)
    }
  },30000)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
async function handleVote(ctx) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'voting') return
  const idx = Number(ctx.match[1])
  const voted = session.answers[idx]
  if (!voted||voted.id===ctx.from.id) return ctx.answerCbQuery('–ù–µ–ª—å–∑—è –∑–∞ —Å–µ–±—è!')
  if (session.votes[ctx.from.id]) return ctx.answerCbQuery('–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!')
  session.votes[ctx.from.id]=voted.id
  await ctx.answerCbQuery('–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç')
  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç
  const counts=session.answers.map(a=>Object.values(session.votes).filter(v=>v===a.id).length)
  let updated=`üó≥ –†–∞—É–Ω–¥ ${session.roundNumber}/3 ‚Äî –≥–æ–ª–æ—Å—É–µ–º:\n${session.prompt}`
  session.answers.forEach((a,i)=>{updated+=`\n${i+1}. ${a.text} ${'üîª'.repeat(counts[i])}`})
  await ctx.telegram.editMessageText(
    session.currentMessage.chatId,
    session.currentMessage.messageId,
    null,
    updated,
    Markup.inlineKeyboard(session.answers.map((_,i)=>[Markup.button.callback(`${i+1}`,`vote_${i}`)]))
  )
  if(Object.keys(session.votes).length===session.players.length){
    await ctx.telegram.deleteMessage(session.currentMessage.chatId, session.currentMessage.messageId).catch(()=>{})
    countVotes(chatId, ctx.telegram)
  }
}

// –ü–æ–¥—Å—á—ë—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
async function countVotes(chatId, telegram) {
  const session = store.getSession(chatId)
  session.phase = 'finished'
  // —Å—á–∏—Ç–∞–µ–º
  Object.values(session.votes).forEach(id=>session.scores[id]=(session.scores[id]||0)+1)
  // –æ–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
  const [winId]=Object.entries(session.scores).reduce((b,[id,sc])=>sc>b[1]?[id,sc]:b,[null,-1])
  const winner=session.players.find(p=>p.id==winId)
  await telegram.sendMessage(chatId,`üèÜ –†–∞—É–Ω–¥ ${session.roundNumber} ‚Äî –∫—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª—å: ${winner.name}!`)
  // —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü
  if(session.roundNumber<3){
    await beginRound(chatId,{telegram})
  } else {
    // —Ñ–∏–Ω–∞–ª
    const final= session.players.map(p=>`${p.name}: ${session.scores[p.id]||0}`).join('\n')
    await telegram.sendMessage(chatId,`üéâ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ò—Ç–æ–≥–∏:\n${final}`)
  }
}

module.exports = { startGame, handleJoin, beginGame, handleAnswer, handleVote }
