const prompts = require('./prompts')
const store = require('./sessionStore')
const { shuffle } = require('./utils')
const { Markup } = require('telegraf')

async function startGame(ctx, bot) {
  const chatId = ctx.chat.id
  store.createSession(chatId)
  const session = store.getSession(chatId)
  session.players = []
  session.phase = 'joining'
  session.prompt = null
  session.answers = []
  session.votes = {}
  session.scores = {}

  await ctx.reply(
    `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!
–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É. –ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤...`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  )
}

async function handleJoin(ctx) {
  const chatId = ctx.chat.id
  const userId = ctx.from.id
  const username = ctx.from.first_name

  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return

  const alreadyJoined = session.players.some(p => p.id === userId)
  if (!alreadyJoined) {
    session.players.push({ id: userId, name: username })
    await ctx.answerCbQuery('–¢—ã –≤ –∏–≥—Ä–µ!')
    await ctx.reply(`${username} –≤—Å—Ç—É–ø–∏–ª(–∞) –≤ –∏–≥—Ä—É!`)
  } else {
    await ctx.answerCbQuery('–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')
  }
}

async function beginGame(ctx, bot) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return

  if (session.players.length < 3) {
    return ctx.answerCbQuery('–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 3 –∏–≥—Ä–æ–∫–∞!')
  }

  session.phase = 'answering'
  const prompt = prompts[Math.floor(Math.random() * prompts.length)]
  session.prompt = prompt
  session.answers = []
  session.votes = {}
  session.scores = {}

  await bot.telegram.sendMessage(chatId, 'üìù –ó–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –∏–≥—Ä–æ–∫–∞–º –≤ –õ–°!')

  for (const player of session.players) {
    try {
      await bot.telegram.sendMessage(player.id, `üìù –ó–∞–¥–∞–Ω–∏–µ:
${prompt}

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫—Ä–∏–Ω–∂-–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥.`)
    } catch (e) {
      await bot.telegram.sendMessage(chatId, `‚ùå ${player.name}, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏–µ. –†–∞–∑—Ä–µ—à–∏ –º–Ω–µ –ø–∏—Å–∞—Ç—å –≤ –õ–°.`)
    }
  }

  setTimeout(() => publishAnswers(chatId, bot), 60000)
}

async function handleAnswer(ctx) {
  const session = Object.values(store.sessions).find((s) => s?.players?.some((p) => p.id === ctx.from.id) && s.phase === 'answering')
  if (!session) return

  const player = session.players.find(p => p.id === ctx.from.id)
  if (session.answers.some(a => a.id === player.id)) return

  session.answers.push({ id: player.id, text: ctx.message.text })
  ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç')
}

async function publishAnswers(chatId, bot) {
  const session = store.getSession(chatId)
  session.phase = 'voting'
  session.answers = shuffle(session.answers)

  let message = `üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏ —Å–∞–º—ã–π –∫—Ä–∏–Ω–∂–æ–≤—ã–π –æ—Ç–≤–µ—Ç:`
  session.answers.forEach((a, i) => {
    message += `\n${i + 1}. ${a.text}`
  })
  const buttons = session.answers.map((_, i) => [Markup.button.callback(`${i + 1}`, `vote_${i}`)])

  bot.telegram.sendMessage(chatId, message, Markup.inlineKeyboard(buttons))
}

async function handleVote(ctx) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'voting') return

  const userId = ctx.from.id
  const voteIndex = parseInt(ctx.match[1])
  const voted = session.answers[voteIndex]

  if (!voted || voted.id === userId) {
    return ctx.answerCbQuery('–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ!')
  }

  if (session.votes[userId]) return ctx.answerCbQuery('–¢—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!')

  session.votes[userId] = voted.id
  ctx.answerCbQuery('–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç ‚úÖ')

  if (Object.keys(session.votes).length === session.players.length) {
    countVotes(chatId, bot)
  }
}

function countVotes(chatId, bot) {
  const session = store.getSession(chatId)
  session.phase = 'finished'

  for (const id of Object.values(session.votes)) {
    session.scores[id] = (session.scores[id] || 0) + 1
  }

  let max = -Infinity
  let king = null
  for (const [id, score] of Object.entries(session.scores)) {
    if (score > max) {
      max = score
      king = id
    }
  }

  const winner = session.players.find(p => p.id == king)

  bot.telegram.sendMessage(chatId, `üëë –ö—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª—å —Ä–∞—É–Ω–¥–∞: ${winner.name} —Å ${max} –≥–æ–ª–æ—Å–∞–º–∏!`)
}

module.exports = { startGame, handleJoin, beginGame, handleAnswer, handleVote }
