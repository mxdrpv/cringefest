const prompts = require('./prompts')
const store = require('./sessionStore')
const { shuffle } = require('./utils')
const { Markup } = require('telegraf')

// –ó–∞–ø—É—Å–∫ —Ñ–∞–∑—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function startGame(ctx) {
  const chatId = ctx.chat.id
  store.createSession(chatId)
  const session = store.getSession(chatId)
  session.players = []
  session.phase = 'joining'
  session.prompt = null
  session.answers = []
  session.votes = {}
  session.scores = {}

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å
  const msg = await ctx.reply(
    `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É. –ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤...`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  )
  session.joinMessage = { chatId, messageId: msg.message_id }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
async function handleJoin(ctx) {
  const chatId = ctx.chat.id
  const userId = ctx.from.id
  const username = ctx.from.first_name

  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return

  if (session.players.some(p => p.id === userId)) {
    return ctx.answerCbQuery('–¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!')
  }
  session.players.push({ id: userId, name: username })
  await ctx.answerCbQuery('–¢—ã –≤ –∏–≥—Ä–µ!')

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º
  const playersList = session.players.map((p, i) => `${i + 1}. ${p.name}`).join('\n')
  const text = `üî• –ö–†–ò–ù–ñ-–§–ï–°–¢ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É. –ñ–¥—ë–º –∏–≥—Ä–æ–∫–æ–≤...\n\n–ò–≥—Ä–æ–∫–∏:\n${playersList}`

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await ctx.telegram.editMessageText(
    session.joinMessage.chatId,
    session.joinMessage.messageId,
    null,
    text,
    Markup.inlineKeyboard([
      [Markup.button.callback('üôã –í—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É', 'join_game')],
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'begin_game')]
    ])
  )
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: –æ—Ç–ø—Ä–∞–≤–∫–∞ –õ–° –∑–∞–¥–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async function beginGame(ctx, bot) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'joining') return

  if (session.players.length < 3) {
    return ctx.answerCbQuery('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞!')
  }

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
  await ctx.telegram.deleteMessage(session.joinMessage.chatId, session.joinMessage.messageId)

  session.phase = 'answering'
  session.prompt = prompts[Math.floor(Math.random() * prompts.length)]
  session.answers = []
  session.votes = {}
  session.scores = {}

  await ctx.answerCbQuery('–ò–≥—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∞! –°–º–æ—Ç—Ä–∏ –õ–°.')
  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const taskMsg = await ctx.telegram.sendMessage(
    chatId,
    'üìù –ó–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –∏–≥—Ä–æ–∫–∞–º –≤ –õ–°!\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n' +
      session.players.map((p, i) => `${i + 1}. ${p.name}`).join('\n')
  )
  session.taskMessage = { chatId, messageId: taskMsg.message_id }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°
  for (const p of session.players) {
    try {
      await ctx.telegram.sendMessage(
        p.id,
        `üìù –ó–∞–¥–∞–Ω–∏–µ:\n${session.prompt}\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫—Ä–∏–Ω–∂-–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥.`
      )
    } catch {
      await ctx.telegram.sendMessage(chatId, `‚ùå –ù–µ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å ${p.name} –≤ –õ–°.`)
    }
  }

  // –ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø—É–±–ª–∏–∫—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  setTimeout(() => publishAnswers(chatId, bot), 60000)
}

// –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ
async function handleAnswer(ctx) {
  const session = Object.values(store.sessions).find(
    s => s.phase === 'answering' && s.players.some(p => p.id === ctx.from.id)
  )
  if (!session) return

  if (session.answers.some(a => a.id === ctx.from.id)) {
    return ctx.reply('–¢—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª!')
  }
  session.answers.push({ id: ctx.from.id, text: ctx.message.text })
  await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
}

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –Ω–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∑–∞–¥–∞–Ω–∏–µ
async function publishAnswers(chatId, bot) {
  const session = store.getSession(chatId)

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏–π
  if (session.taskMessage && session.taskMessage.messageId) {
    await bot.telegram.deleteMessage(session.taskMessage.chatId, session.taskMessage.messageId).catch(() => {})
  }

  session.phase = 'voting'
  session.answers = shuffle(session.answers)

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  let text = `üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –ó–∞–¥–∞–Ω–∏–µ:\n${session.prompt}\n\n–í—ã–±–µ—Ä–∏ —Å–∞–º—ã–π –∫—Ä–∏–Ω–∂–æ–≤—ã–π –æ—Ç–≤–µ—Ç:`
  session.answers.forEach((a, i) => {
    text += `\n${i + 1}. ${a.text}`
  })

  const buttons = session.answers.map((_, i) => [Markup.button.callback(`${i + 1}`, `vote_${i}`)])
  const msg = await bot.telegram.sendMessage(chatId, text, Markup.inlineKeyboard(buttons))
  session.voteMessage = { chatId, messageId: msg.message_id }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (session.phase === 'voting' && session.voteMessage.messageId) {
      bot.telegram.deleteMessage(session.voteMessage.chatId, session.voteMessage.messageId).catch(() => {})
      countVotes(session.voteMessage, bot)
    }
  }, 30000)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async function handleVote(ctx) {
  const chatId = ctx.chat.id
  const session = store.getSession(chatId)
  if (!session || session.phase !== 'voting') return

  const idx = Number(ctx.match[1])
  const voted = session.answers[idx]
  if (!voted || voted.id === ctx.from.id) {
    return ctx.answerCbQuery('–ù–µ–ª—å–∑—è –∑–∞ —Å–µ–±—è!')
  }
  if (session.votes[ctx.from.id]) {
    return ctx.answerCbQuery('–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª!')
  }
  session.votes[ctx.from.id] = voted.id
  await ctx.answerCbQuery('–ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!')

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—á—ë—Ç–∞–º–∏
  const counts = session.answers.map(a => Object.values(session.votes).filter(v => v === a.id).length)
  let updated = `üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –ó–∞–¥–∞–Ω–∏–µ:\n${session.prompt}\n\n–í—ã–±–µ—Ä–∏ —Å–∞–º—ã–π –∫—Ä–∏–Ω–∂–æ–≤—ã–π –æ—Ç–≤–µ—Ç:`
  session.answers.forEach((a, i) => {
    const marks = 'üîª'.repeat(counts[i])
    updated += `\n${i + 1}. ${a.text} ${marks}`
  })
  await ctx.telegram.editMessageText(
    session.voteMessage.chatId,
    session.voteMessage.messageId,
    null,
    updated,
    Markup.inlineKeyboard(session.answers.map((_, i) => [Markup.button.callback(`${i + 1}`, `vote_${i}`)]))
  )

  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  if (Object.keys(session.votes).length === session.players.length) {
    await ctx.telegram.deleteMessage(session.voteMessage.chatId, session.voteMessage.messageId).catch(() => {})
    countVotes(session.voteMessage, ctx.telegram)
  }
}

// –ü–æ–¥—Å—á—ë—Ç –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª—è
async function countVotes(voteMessage, bot) {
  const { chatId } = voteMessage
  const session = store.getSession(chatId)
  session.phase = 'finished'

  Object.values(session.votes).forEach(id => {
    session.scores[id] = (session.scores[id] || 0) + 1
  })
  const [winnerId] = Object.entries(session.scores).reduce(
    (best, [id, sc]) => sc > best[1] ? [id, sc] : best,
    [null, -1]
  )
  const winner = session.players.find(p => p.id == winnerId)
  await bot.telegram.sendMessage(chatId, `üëë –ö—Ä–∏–Ω–∂-–∫–æ—Ä–æ–ª—å: ${winner.name}!`)
}

module.exports = { startGame, handleJoin, beginGame, handleAnswer, handleVote }
